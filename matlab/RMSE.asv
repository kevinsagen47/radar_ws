
object1_cam_x=radar_cam_callib(:,1);
object1_radar_x=radar_cam_callib(:,3);
object1_y=radar_cam_callib(:,4);

for i=2:340;

path1=GetPointLineDistance(x_bayes1(40),object1_y(40), ...
                            -1*route_p2(1,1),route_p2(2,1), ...
                            -1*route_p2(1,2),route_p2(2,2));

path2=GetPointLineDistance(x_bayes1(40),object1_y(40), ...
                            -1*route_p2(1,2),route_p2(2,2), ...
                            -1*route_p2(1,3),route_p2(2,3));

path3=GetPointLineDistance(x_bayes1(40),object1_y(40), ...
                            -1*route_p2(1,3),route_p2(2,3), ...
                            -1*route_p2(1,4),route_p2(2,4));

minimum_dist=min([path1,path2,path3])
end














function distance = GetPointLineDistance(x3,y3,x1,y1,x2,y2)
try
	
	% Find the numerator for our point-to-line distance formula.
	numerator = abs((x2 - x1) * (y1 - y3) - (x1 - x3) * (y2 - y1));
	
	% Find the denominator for our point-to-line distance formula.
	denominator = sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2);
	
	% Compute the distance.
	distance = numerator ./ denominator;
catch ME
	callStackString = GetCallStack(ME);
	errorMessage = sprintf('Error in program %s.\nTraceback (most recent at top):\n%s\nError Message:\n%s',...
		mfilename, callStackString, ME.message);
	WarnUser(errorMessage)
end
return; % from GetPointLineDistance()
end